<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.system.mapper.AccountMapper">

    <resultMap type="Account" id="AccountResult">
        <result property="id"    column="id"    />
        <result property="userId"    column="user_id"    />
        <result property="balanceIncomeAmount"    column="balance_income_amount"    />
        <result property="balanceExpenseAmount"    column="balance_expense_amount"    />
        <result property="availableBalance"    column="available_balance"    />
        <result property="freezeBalanceAmount"    column="freeze_balance_amount"    />
        <result property="totalBetAmount"    column="total_bet_amount"    />
        <result property="totalWinLoseAmount"    column="total_win_lose_amount"    />
        <result property="status"    column="status"    />
        <result property="createTime"    column="create_time"    />
        <result property="updateTime"    column="update_time"    />
    </resultMap>

    <sql id="selectAccountVo">
        select id, user_id, balance_income_amount, balance_expense_amount, available_balance, freeze_balance_amount, total_bet_amount, total_win_lose_amount, status, create_time, update_time from t_account
    </sql>

    <select id="selectAccountList" parameterType="Account" resultMap="AccountResult">
        select a.* from t_account a left join t_user b on a.id = b.id
        <where>
            <if test="id != null "> and a.id = #{id}</if>
            <if test="userId != null "> and a.user_id = #{userId}</if>
            <if test="balanceIncomeAmount != null "> and a.balance_income_amount = #{balanceIncomeAmount}</if>
            <if test="balanceExpenseAmount != null "> and a.balance_expense_amount = #{balanceExpenseAmount}</if>
            <if test="availableBalance != null "> and a.available_balance = #{availableBalance}</if>
            <if test="freezeBalanceAmount != null "> and a.freeze_balance_amount = #{freezeBalanceAmount}</if>
            <if test="totalBetAmount != null "> and a.total_bet_amount = #{totalBetAmount}</if>
            <if test="totalWinLoseAmount != null "> and a.total_win_lose_amount = #{totalWinLoseAmount}</if>
            <if test="status != null "> and a.status = #{status}</if>
            <if test="platformId != null "> and b.platform_id = #{platformId}</if>
        </where>
    </select>

    <select id="selectAccountById" parameterType="Long" resultMap="AccountResult">
        <include refid="selectAccountVo"/>
        where id = #{id}
    </select>

    <insert id="insertAccount" parameterType="Account">
        insert into t_account
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">id,</if>
            <if test="userId != null">user_id,</if>
            <if test="balanceIncomeAmount != null">balance_income_amount,</if>
            <if test="balanceExpenseAmount != null">balance_expense_amount,</if>
            <if test="availableBalance != null">available_balance,</if>
            <if test="freezeBalanceAmount != null">freeze_balance_amount,</if>
            <if test="totalBetAmount != null">total_bet_amount,</if>
            <if test="totalWinLoseAmount != null">total_win_lose_amount,</if>
            <if test="status != null">status,</if>
            <if test="createTime != null">create_time,</if>
            <if test="updateTime != null">update_time,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">#{id},</if>
            <if test="userId != null">#{userId},</if>
            <if test="balanceIncomeAmount != null">#{balanceIncomeAmount},</if>
            <if test="balanceExpenseAmount != null">#{balanceExpenseAmount},</if>
            <if test="availableBalance != null">#{availableBalance},</if>
            <if test="freezeBalanceAmount != null">#{freezeBalanceAmount},</if>
            <if test="totalBetAmount != null">#{totalBetAmount},</if>
            <if test="totalWinLoseAmount != null">#{totalWinLoseAmount},</if>
            <if test="status != null">#{status},</if>
            <if test="createTime != null">#{createTime},</if>
            <if test="updateTime != null">#{updateTime},</if>
         </trim>
    </insert>

    <update id="updateAccount" parameterType="Account">
        update t_account
        <trim prefix="SET" suffixOverrides=",">
            <if test="userId != null">user_id = #{userId},</if>
            <if test="balanceIncomeAmount != null">balance_income_amount = #{balanceIncomeAmount},</if>
            <if test="balanceExpenseAmount != null">balance_expense_amount = #{balanceExpenseAmount},</if>
            <if test="availableBalance != null">available_balance = #{availableBalance},</if>
            <if test="freezeBalanceAmount != null">freeze_balance_amount = #{freezeBalanceAmount},</if>
            <if test="totalBetAmount != null">total_bet_amount = #{totalBetAmount},</if>
            <if test="totalWinLoseAmount != null">total_win_lose_amount = #{totalWinLoseAmount},</if>
            <if test="status != null">status = #{status},</if>
            <if test="createTime != null">create_time = #{createTime},</if>
            <if test="updateTime != null">update_time = #{updateTime},</if>
        </trim>
        where id = #{id}
    </update>

    <delete id="deleteAccountById" parameterType="Long">
        delete from t_account where id = #{id}
    </delete>

    <delete id="deleteAccountByIds" parameterType="String">
        delete from t_account where id in
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <update id="doFreezeBalance">
        update t_account set
        freeze_balance_amount = freeze_balance_amount + #{amount},
        available_balance = available_balance - #{amount},
        update_time = now()
        where id = #{accountId} and available_balance &gt;= #{amount}
    </update>

    <update id="doUnFreezeBalance">
        update t_account set
        freeze_balance_amount = freeze_balance_amount - #{amount},
        available_balance = available_balance + #{amount},
        update_time = now()
        where id = #{accountId} and freeze_balance_amount &gt;= #{amount}
    </update>

    <update id="addBalance">
        update t_account set
        balance_income_amount = balance_income_amount + #{amount},
        available_balance = available_balance + #{amount},
        update_time = now()
        where id = #{accountId}
    </update>

    <update id="reduceBalance">
        update t_account set
        balance_expense_amount = balance_expense_amount + #{amount},
        available_balance = available_balance - #{amount},
        update_time = now()
        where id = #{accountId} and available_balance &gt;= #{amount}
    </update>

    <update id="addTotalBetAmount">
       update t_account set total_bet_amount = total_bet_amount + #{amount} where id = #{accountId}
   </update>

    <update id="reduceTotalBetAmount">
       update t_account set total_bet_amount = total_bet_amount - #{amount} where id = #{accountId}
   </update>

    <update id="addTotalWinLoseAmount">
       update t_account set total_win_lose_amount = total_win_lose_amount + #{amount} where id = #{accountId}
   </update>

    <update id="reduceTotalWinLoseAmount">
       update t_account set total_win_lose_amount = total_win_lose_amount - #{amount} where id = #{accountId}
   </update>

</mapper>
